# -*- coding: utf-8 -*-
"""FakeNewsDetector.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Foi2uFHR1lVCUsRsloQHNeHb1bUem-d9

# FAKE NEWS DETECTOR
"""

import numpy as np
import pandas as pd
import re
from nltk.corpus import stopwords # the for of in with
from nltk.stem.porter import PorterStemmer # loved loving == love
from sklearn.feature_extraction.text import TfidfVectorizer # loved = [0.0]
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

news_df = pd.read_csv('train.csv', quoting=3, on_bad_lines='skip')
# Use 'on_bad_lines' to skip bad lines

news_df.head()

news_df.shape

news_df.isna().sum()

news_df = news_df.fillna(' ')

news_df['content'] = news_df['author']+" "+news_df['title']

news_df

news_df['content']

"""## Stemming

"""

ps = PorterStemmer()
def stemming(content):
    stemmed_content = re.sub('[^a-zA-Z]',' ',content)
    stemmed_content = stemmed_content.lower()
    stemmed_content = stemmed_content.split()
    stemmed_content = [ps.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
    stemmed_content = ' '.join(stemmed_content)
    return stemmed_content

import nltk
nltk.download('stopwords')
news_df['content'] = news_df['content'].apply(stemming)

news_df['content']

X = news_df['content'].values
y = news_df['label'].values

print(X)

import nltk
from sklearn.feature_extraction.text import TfidfVectorizer

# Assuming 'news_df' is a DataFrame with a 'content' column containing text
# and stemming is a defined function

# Apply stemming to the 'content' column before vectorization
news_df['content'] = news_df['content'].apply(stemming)

# Extract the text data
X = news_df['content'].values

# Initialize TfidfVectorizer
vector = TfidfVectorizer()

# Fit and transform the text data
X = vector.fit_transform(X)  # Directly fit_transform to avoid the error

print(X)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)

X_train.shape

X_test.shape

model = LogisticRegression()
model.fit(X_train,y_train)

train_y_pred = model.predict(X_train)
print("train accurracy :",accuracy_score(train_y_pred,y_train))

test_y_pred = model.predict(X_test)
print("train accurracy :",accuracy_score(test_y_pred,y_test))

"""## **Prediction system**"""

input_data = X_test[20]
prediction = model.predict(input_data)
if prediction[0] == 1:
    print('Fake news')
else:
    print('Real news')

news_df['content'][20]

